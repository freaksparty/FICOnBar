/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
*/
package org.freaksparty.ficonbar.window;

import FICOnBar.entity.Client;
import FICOnBar.entity.ClientType;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Iterator;
import java.util.List;
import javax.swing.JOptionPane;
import org.freaksparty.ficonbar.exception.UserException;
import org.freaksparty.ficonbar.exception.UserTypeException;
import org.freaksparty.ficonbar.util.Customer;
import org.freaksparty.ficonbar.util.DBSession;
import org.freaksparty.ficonbar.util.User;
import org.freaksparty.ficonbar.util.Util;
import org.hibernate.Query;
import org.hibernate.Session;

/**
 *
 * @author Osane
 */
public class SelectUser extends javax.swing.JDialog {

    Session session = DBSession.getSession();
    
    /**
     * Creates new form SelectUser
     * @param parent
     * @param modal
     */
    public SelectUser(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        initComboBox();
        getRootPane().setDefaultButton(btnSelectUser);
        txtBarCode.requestFocusInWindow();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        radGroup = new javax.swing.ButtonGroup();
        radOrga = new javax.swing.JRadioButton();
        radOtros = new javax.swing.JRadioButton();
        cmbUsers = new javax.swing.JComboBox<>();
        btnSelectUser = new javax.swing.JButton();
        txtBarCode = new javax.swing.JTextField();
        lblBarCode = new javax.swing.JLabel();
        radParticipante = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setLocationByPlatform(true);
        setMaximumSize(new java.awt.Dimension(600, 500));
        setMinimumSize(new java.awt.Dimension(200, 200));
        setModal(true);
        setResizable(false);

        radGroup.add(radOrga);
        radOrga.setFont(new java.awt.Font("Cambria", 0, 24)); // NOI18N
        radOrga.setText("Orga");
        radOrga.setRequestFocusEnabled(false);

        radGroup.add(radOtros);
        radOtros.setFont(new java.awt.Font("Cambria", 0, 24)); // NOI18N
        radOtros.setText("Otros");
        radOtros.setRequestFocusEnabled(false);

        cmbUsers.setFont(new java.awt.Font("Cambria", 0, 24)); // NOI18N
        cmbUsers.setMaximumRowCount(50);
        cmbUsers.setRequestFocusEnabled(false);

        btnSelectUser.setFont(new java.awt.Font("Cambria", 1, 24)); // NOI18N
        btnSelectUser.setText("Aceptar");
        btnSelectUser.setRequestFocusEnabled(false);
        btnSelectUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectUserActionPerformed(evt);
            }
        });

        txtBarCode.setFont(new java.awt.Font("Cambria", 0, 24)); // NOI18N
        txtBarCode.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        lblBarCode.setFont(new java.awt.Font("Cambria", 1, 24)); // NOI18N
        lblBarCode.setText("CÃ³digo de barras");
        lblBarCode.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        lblBarCode.setRequestFocusEnabled(false);

        radGroup.add(radParticipante);
        radParticipante.setFont(new java.awt.Font("Cambria", 0, 24)); // NOI18N
        radParticipante.setSelected(true);
        radParticipante.setText("Participante");
        radParticipante.setToolTipText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblBarCode)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(radOtros)
                            .addComponent(radOrga))
                        .addGap(40, 40, 40)
                        .addComponent(cmbUsers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(radParticipante)
                    .addComponent(txtBarCode, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(127, 127, 127)
                        .addComponent(btnSelectUser, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(59, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(radParticipante)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(radOrga)
                        .addGap(6, 6, 6)
                        .addComponent(radOtros))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(cmbUsers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(lblBarCode)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtBarCode, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSelectUser, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private Client getUserByBarCode(String barcode) throws UserException{
        Query query = session.createQuery("Select c from Client c where c.barcode = :barcode").setParameter("barcode", barcode);
        
        if(query.list().size() < 2)
            return (Client)query.uniqueResult();
        else
            throw new UserException("Error obteniendo usuario, codigo de barras no valido.");
    }
    
    private Client getUserByName(String name) throws UserException{
        Query query = session.createQuery("Select c from Client c where c.name = :name").setParameter("name", name);
        
        if(query.list().size() < 2)
            return (Client)query.list().get(0);
        else
            throw new UserException("Error getting user by name.");
        
    }
    
    private List<ClientType> getListTiposUsuario(){
        Query query = session.createQuery("Select ct from ClientType ct");
        List<ClientType> listTiposUsuario = query.list();
        
        return listTiposUsuario.isEmpty() ? null : listTiposUsuario;
    }
    
    private ClientType getTipoUsuarioById(int id) throws UserTypeException{
        Query query = session.createQuery("Select ct from ClientType ct where ct.clientTypeId = :id").setParameter("id", id);
        
        if(query.list().size() > 0)
            return (ClientType)query.list().get(0);
        
        throw new UserTypeException("Error getting user type by ID");
    }
    
    private int getTipoUsuarioIdByName(String name) throws UserTypeException{
        List<ClientType> listTiposUsuario = getListTiposUsuario();
        if(listTiposUsuario != null){
            Iterator<ClientType> it = listTiposUsuario.iterator();
            ClientType tp;

            while(it.hasNext()){
                tp = it.next();
                if(tp.getName().equals(name))
                    return tp.getClientTypeId();
            }
        }
       throw new UserTypeException("Error getting user type by name.");
    }
    
    private List<String> getUserNamesOfSpecificUserType(String type) throws UserException{
        
        try{
            int typeId = getTipoUsuarioIdByName(type);
            Query query = session.createQuery("Select c.name from Client c where c.clientType.clientTypeId = :typeId").setParameter("typeId", typeId);
            return query.list();
        }catch (Exception e){
            throw new UserException("Error getting user name of an specific user type.");
        }
    }
    
    private void btnSelectUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectUserActionPerformed
        InitialWindow iw = (InitialWindow)this.getParent();
        String barcode = txtBarCode.getText();
        if(barcode.isEmpty()){
            try {
                if(radParticipante.isSelected()){
                    Customer.client = getUserByName(radParticipante.getText());
                    Customer.clientType = getTipoUsuarioById(getTipoUsuarioIdByName(radParticipante.getText()));
                }
                else{
                    String selectedItem = cmbUsers.getSelectedItem().toString();
                    if(selectedItem.isEmpty() || selectedItem.equals("-")){
                        JOptionPane.showMessageDialog(this, "Debe seleccionar un usuario vÃ¡lido","Warning",JOptionPane.WARNING_MESSAGE);
                        return;
                    }
                    
                    Customer.client = getUserByName(cmbUsers.getSelectedItem().toString());
                    Util.registerLogToDB("Seleccionado cliente " + Customer.client.getName() + " a traves de nombre.", User.user.getUserId());
                    if(radOrga.isSelected())
                        Customer.clientType = getTipoUsuarioById(getTipoUsuarioIdByName(radOrga.getText()));
                    else if(radOtros.isSelected())
                        Customer.clientType = getTipoUsuarioById(getTipoUsuarioIdByName(radOtros.getText()));
                }
                    
            }catch(UserTypeException ute){
                
            }catch(UserException ue){JOptionPane.showMessageDialog(this,"Usuario no vÃ¡lido.","Error", JOptionPane.ERROR_MESSAGE);}
        }
        else
            try{
                Customer.client = getUserByBarCode(barcode);
                Util.registerLogToDB("Seleccionado cliente " + Customer.client.getName() + " desde codigo de barras.", User.user.getUserId());
            }catch(UserException ue){JOptionPane.showMessageDialog(this,"Usuario no vÃ¡lido.","Error", JOptionPane.ERROR_MESSAGE);}
        this.dispose();
    }//GEN-LAST:event_btnSelectUserActionPerformed
  
    private void fillCombobox(List<String> names){
        cmbUsers.removeAllItems();
        cmbUsers.addItem("-");
        for(String name : names )
            cmbUsers.addItem(name);
    }
    
    private void initComboBox(){
    
        try{
            List<String> userNames = getUserNamesOfSpecificUserType("Orga");
            fillCombobox(userNames);

            radOrga.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    try {
                        List<String> userNames = getUserNamesOfSpecificUserType("Orga");
                        fillCombobox(userNames);
                    } catch (UserException ex) {
                        System.out.println("Error filling combobox");
                    }
                }
            });

            radOtros.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    try {
                        List<String> userNames = getUserNamesOfSpecificUserType("Otros");
                        fillCombobox(userNames);
                    } catch (UserException ex) {
                        System.out.println("Error filling combobox");
                    }
                }
            });
        }catch(UserException ue){System.out.println("Error getting user names.");}
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SelectUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SelectUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SelectUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SelectUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SelectUser dialog = new SelectUser(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSelectUser;
    private javax.swing.JComboBox<String> cmbUsers;
    private javax.swing.JLabel lblBarCode;
    private javax.swing.ButtonGroup radGroup;
    private javax.swing.JRadioButton radOrga;
    private javax.swing.JRadioButton radOtros;
    private javax.swing.JRadioButton radParticipante;
    private javax.swing.JTextField txtBarCode;
    // End of variables declaration//GEN-END:variables
}
