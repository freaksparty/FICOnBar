/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.freaksparty.ficonbar.window;

import FICOnBar.entity.Client;
import FICOnBar.entity.Product;
import FICOnBar.entity.ProductType;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import org.freaksparty.ficonbar.util.ButtonEntity;
import org.freaksparty.ficonbar.util.Customer;
import org.freaksparty.ficonbar.util.DBSession;
import org.freaksparty.ficonbar.util.DynamicButtons;
import org.freaksparty.ficonbar.util.DynamicComponents;
import org.freaksparty.ficonbar.util.User;
import org.freaksparty.ficonbar.util.Util;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;

/**
 *
 * @author Osane
 */
public class InitialWindow extends javax.swing.JFrame {
    
    private final Session session = DBSession.getSession();
    private javax.swing.JPanel buttonPanel;
    
    private InitialWindow self = this;
    
    /**
     * Creates new form InitialWindow
     */
    public InitialWindow() {
        initComponents();
        setExtendedState(java.awt.Frame.MAXIMIZED_BOTH);
        TableColumn productColumn = tblCustomerProductoList.getColumn("Producto");
        productColumn.setPreferredWidth(100);
        addButtons();
        setUser();
        lblUser.setText("Usuario: " + User.user.getName());
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        topPanel = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        lblUser = new javax.swing.JLabel();
        centerScrollPane = new javax.swing.JScrollPane();
        bottomPanel = new javax.swing.JPanel();
        btnBack = new javax.swing.JButton();
        btnFinish = new javax.swing.JButton();
        leftPanel = new javax.swing.JPanel();
        btnDeleteRow = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCustomerProductoList = new javax.swing.JTable();
        txtTotalPrice = new javax.swing.JTextField();
        lblClient = new javax.swing.JLabel();
        btnSelectUser = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        menuProducts = new javax.swing.JMenu();
        menuProdAdd = new javax.swing.JMenuItem();
        menuProdDelete = new javax.swing.JMenuItem();
        menuProdModify = new javax.swing.JMenuItem();
        menuClients = new javax.swing.JMenu();
        menuClientAdd = new javax.swing.JMenuItem();
        menuClientDelete = new javax.swing.JMenuItem();
        menuClientModify = new javax.swing.JMenuItem();
        menuAdvance = new javax.swing.JMenu();
        menuUserSales = new javax.swing.JMenuItem();
        menuUserAdd = new javax.swing.JMenuItem();
        menuImageAdd = new javax.swing.JMenuItem();
        menuAddProductType = new javax.swing.JMenuItem();
        menuDelProductType = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocationByPlatform(true);

        topPanel.setLayout(new javax.swing.BoxLayout(topPanel, javax.swing.BoxLayout.LINE_AXIS));

        lblTitle.setFont(new java.awt.Font("Cambria", 1, 36)); // NOI18N
        lblTitle.setText("FIC OnBar");
        lblTitle.setMaximumSize(new java.awt.Dimension(3000, 43));
        topPanel.add(lblTitle);

        lblUser.setFont(new java.awt.Font("Cambria", 1, 36)); // NOI18N
        lblUser.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblUser.setText("User");
        lblUser.setToolTipText("");
        lblUser.setMaximumSize(new java.awt.Dimension(3000, 43));
        topPanel.add(lblUser);

        getContentPane().add(topPanel, java.awt.BorderLayout.PAGE_START);

        centerScrollPane.setBorder(null);
        centerScrollPane.setFont(new java.awt.Font("Cambria", 1, 24)); // NOI18N
        centerScrollPane.setPreferredSize(new java.awt.Dimension(500, 300));
        getContentPane().add(centerScrollPane, java.awt.BorderLayout.CENTER);

        bottomPanel.setLayout(new javax.swing.BoxLayout(bottomPanel, javax.swing.BoxLayout.LINE_AXIS));

        btnBack.setFont(new java.awt.Font("Cambria", 1, 48)); // NOI18N
        btnBack.setText("<<");
        btnBack.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnBack.setMaximumSize(new java.awt.Dimension(900, 300));
        btnBack.setMinimumSize(new java.awt.Dimension(229, 65));
        btnBack.setPreferredSize(new java.awt.Dimension(300, 100));
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        bottomPanel.add(btnBack);

        btnFinish.setFont(new java.awt.Font("Cambria", 1, 48)); // NOI18N
        btnFinish.setText("Finalizar");
        btnFinish.setActionCommand("Finalizar y pagar");
        btnFinish.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnFinish.setMaximumSize(new java.awt.Dimension(900, 200));
        btnFinish.setPreferredSize(new java.awt.Dimension(300, 100));
        btnFinish.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnFinish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFinishActionPerformed(evt);
            }
        });
        bottomPanel.add(btnFinish);

        getContentPane().add(bottomPanel, java.awt.BorderLayout.PAGE_END);

        leftPanel.setLayout(new javax.swing.BoxLayout(leftPanel, javax.swing.BoxLayout.Y_AXIS));

        btnDeleteRow.setFont(new java.awt.Font("Cambria", 1, 36)); // NOI18N
        btnDeleteRow.setText("Eliminar Fila");
        btnDeleteRow.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnDeleteRow.setMaximumSize(new java.awt.Dimension(600, 300));
        btnDeleteRow.setPreferredSize(new java.awt.Dimension(300, 51));
        btnDeleteRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteRowActionPerformed(evt);
            }
        });
        leftPanel.add(btnDeleteRow);

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setAutoscrolls(true);
        jScrollPane1.setPreferredSize(new java.awt.Dimension(300, 900));
        jScrollPane1.setVerifyInputWhenFocusTarget(false);

        tblCustomerProductoList.setFont(new java.awt.Font("Cambria", 1, 18)); // NOI18N
        tblCustomerProductoList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Producto", "Cantidad", "Precio"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblCustomerProductoList.setAutoscrolls(false);
        tblCustomerProductoList.setPreferredSize(new java.awt.Dimension(500, 850));
        tblCustomerProductoList.setShowVerticalLines(false);
        tblCustomerProductoList.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblCustomerProductoList);

        leftPanel.add(jScrollPane1);

        txtTotalPrice.setEditable(false);
        txtTotalPrice.setFont(new java.awt.Font("Cambria", 1, 18)); // NOI18N
        txtTotalPrice.setToolTipText("");
        txtTotalPrice.setMaximumSize(new java.awt.Dimension(2147483647, 40));
        txtTotalPrice.setMinimumSize(new java.awt.Dimension(6, 20));
        txtTotalPrice.setPreferredSize(new java.awt.Dimension(300, 40));
        leftPanel.add(txtTotalPrice);

        lblClient.setFont(new java.awt.Font("Cambria", 1, 24)); // NOI18N
        lblClient.setText("Cliente:");
        lblClient.setFocusable(false);
        lblClient.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        leftPanel.add(lblClient);

        btnSelectUser.setFont(new java.awt.Font("Cambria", 1, 36)); // NOI18N
        btnSelectUser.setText("Cambiar cliente");
        btnSelectUser.setToolTipText("Seleccionar usuarios de orga o con algÃºn descuento");
        btnSelectUser.setBorderPainted(false);
        btnSelectUser.setInheritsPopupMenu(true);
        btnSelectUser.setMaximumSize(new java.awt.Dimension(500, 100));
        btnSelectUser.setPreferredSize(new java.awt.Dimension(400, 55));
        btnSelectUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectUserActionPerformed(evt);
            }
        });
        leftPanel.add(btnSelectUser);

        getContentPane().add(leftPanel, java.awt.BorderLayout.LINE_START);

        menuBar.setFont(new java.awt.Font("Cambria", 1, 24)); // NOI18N

        menuProducts.setText("Productos");
        menuProducts.setBorderPainted(true);
        menuProducts.setFont(new java.awt.Font("Cambria", 1, 24)); // NOI18N
        menuProducts.setInheritsPopupMenu(true);
        menuProducts.setNextFocusableComponent(menuClients);

        menuProdAdd.setFont(new java.awt.Font("Cambria", 1, 20)); // NOI18N
        menuProdAdd.setText("AÃ±adir producto");
        menuProdAdd.setDisplayedMnemonicIndex(0);
        menuProdAdd.setFocusable(true);
        menuProdAdd.setNextFocusableComponent(menuProdDelete);
        menuProdAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuProdAddActionPerformed(evt);
            }
        });
        menuProducts.add(menuProdAdd);

        menuProdDelete.setFont(new java.awt.Font("Cambria", 1, 20)); // NOI18N
        menuProdDelete.setText("Eliminar producto");
        menuProdDelete.setFocusable(true);
        menuProdDelete.setNextFocusableComponent(menuProdModify);
        menuProdDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuProdDeleteActionPerformed(evt);
            }
        });
        menuProducts.add(menuProdDelete);

        menuProdModify.setFont(new java.awt.Font("Cambria", 1, 20)); // NOI18N
        menuProdModify.setText("Editar producto");
        menuProdModify.setDisplayedMnemonicIndex(0);
        menuProdModify.setFocusable(true);
        menuProdModify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuProdModifyActionPerformed(evt);
            }
        });
        menuProducts.add(menuProdModify);

        menuBar.add(menuProducts);

        menuClients.setText("Clientes");
        menuClients.setFont(new java.awt.Font("Cambria", 1, 24)); // NOI18N

        menuClientAdd.setFont(new java.awt.Font("Cambria", 1, 20)); // NOI18N
        menuClientAdd.setText("AÃ±adir cliente");
        menuClientAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuClientAddActionPerformed(evt);
            }
        });
        menuClients.add(menuClientAdd);

        menuClientDelete.setFont(new java.awt.Font("Cambria", 1, 20)); // NOI18N
        menuClientDelete.setText("Eliminar cliente");
        menuClientDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuClientDeleteActionPerformed(evt);
            }
        });
        menuClients.add(menuClientDelete);

        menuClientModify.setFont(new java.awt.Font("Cambria", 1, 20)); // NOI18N
        menuClientModify.setText("Editar cliente");
        menuClientModify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuClientModifyActionPerformed(evt);
            }
        });
        menuClients.add(menuClientModify);

        menuBar.add(menuClients);

        menuAdvance.setText("Avanzado");
        menuAdvance.setToolTipText("");
        menuAdvance.setFont(new java.awt.Font("Cambria", 1, 24)); // NOI18N

        menuUserSales.setFont(new java.awt.Font("Cambria", 1, 20)); // NOI18N
        menuUserSales.setText("Ventas/Usuario");
        menuUserSales.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuUserSalesActionPerformed(evt);
            }
        });
        menuAdvance.add(menuUserSales);

        menuUserAdd.setFont(new java.awt.Font("Cambria", 1, 20)); // NOI18N
        menuUserAdd.setText("AÃ±adir usuario");
        menuUserAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuUserAddActionPerformed(evt);
            }
        });
        menuAdvance.add(menuUserAdd);

        menuImageAdd.setFont(new java.awt.Font("Cambria", 1, 20)); // NOI18N
        menuImageAdd.setText("AÃ±adir imagen");
        menuImageAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuImageAddActionPerformed(evt);
            }
        });
        menuAdvance.add(menuImageAdd);

        menuAddProductType.setFont(new java.awt.Font("Cambria", 1, 20)); // NOI18N
        menuAddProductType.setText("AÃ±adir tipo prod.");
        menuAddProductType.setToolTipText("");
        menuAddProductType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAddProductTypeActionPerformed(evt);
            }
        });
        menuAdvance.add(menuAddProductType);

        menuDelProductType.setFont(new java.awt.Font("Cambria", 1, 20)); // NOI18N
        menuDelProductType.setText("Eliminar tipo prod.");
        menuDelProductType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuDelProductTypeActionPerformed(evt);
            }
        });
        menuAdvance.add(menuDelProductType);

        menuBar.add(menuAdvance);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    // <editor-fold defaultstate="collapsed" desc="Buttons"> 
    private void btnSelectUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectUserActionPerformed
        SelectUser userDlg = new SelectUser(this,rootPaneCheckingEnabled);
        userDlg.setVisible(true);
        userDlg.addWindowListener(new WindowListener() {
            @Override
            public void windowOpened(WindowEvent e) {}

            @Override
            public void windowClosing(WindowEvent e) {}

            @Override
            public void windowClosed(WindowEvent e) {
               lblClient.setText("Client: " +Customer.client.getName());
               lblClient.repaint();
               
               DefaultTableModel tableModel = (DefaultTableModel)tblCustomerProductoList.getModel();
               float newTotal = 0;
               if(tableModel.getRowCount() > 0){
                   float newPrice = 0;
                   for(int i = 0 ; i < tableModel.getRowCount(); i++){
                       String pName = tableModel.getValueAt(i,0).toString();
                       int productId = Util.getProductByName(pName).get(0).getProductId();
                       newPrice = Util.getPrice(productId, Customer.clientType.getClientTypeId());
                       newPrice *= (int)tableModel.getValueAt(i,1);
                       tableModel.setValueAt(newPrice, i, 2);
                       newTotal += newPrice;
                   }
               }
               String totalString = String.format("%.2f", newTotal);
               txtTotalPrice.setText("Total" + "\t\t\t" + totalString);
               DynamicComponents.getTxtTotalPrice().setText("Total" + "\t\t\t" + totalString);
            }

            @Override
            public void windowIconified(WindowEvent e) {}

            @Override
            public void windowDeiconified(WindowEvent e) {}

            @Override
            public void windowActivated(WindowEvent e) {}

            @Override
            public void windowDeactivated(WindowEvent e) {}
        });
    }//GEN-LAST:event_btnSelectUserActionPerformed

    private void btnFinishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFinishActionPerformed
       
        ArrayList<Product> productList = new ArrayList<Product>();
        DefaultTableModel tableModel = (DefaultTableModel)tblCustomerProductoList.getModel();
        int numRows = tableModel.getRowCount();
        boolean productExists = false;
        float precio = 0;
        
        if(numRows > 0){
            for(int i = 0; i < numRows; i++)
                productList.add(Util.getProductByName(tableModel.getValueAt(i, 0).toString()).get(0));

            for(Product p : productList){
                precio = Util.getPrice(p.getProductId(),Customer.clientType.getClientTypeId());

                productExists = Util.getSales(p.getProductId()).size() > 0;

                if(productExists){
                    try{
                        Util.updateSale(precio, p.getProductId());
                        Util.registerLogToDB("Venta de " +p.getName()+ " a " + Customer.client.getName() + " por " + precio + "euros.", User.user.getUserId());
                    }catch(HibernateException hEx){
                        Util.registerLogToDB(hEx.getMessage(), User.user.getUserId());
                        JOptionPane.showMessageDialog(this, "Error actualizando venta. Contacte con un administrador", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
                else{
                    try{
                        Util.insertSales(precio, p.getProductId());
                        Util.registerLogToDB("Venta de " +p.getName()+ " a " + Customer.client.getName() + " por " + precio + "euros.", User.user.getUserId());
                    }catch(HibernateException hEx){
                        Util.registerLogToDB(hEx.getMessage(), User.user.getUserId());
                        JOptionPane.showMessageDialog(this, "Error insertando venta. Contacte con un administrador", "Error", JOptionPane.ERROR_MESSAGE);
                    }                   
                }
            }

            if(Customer.clientType.getClientTypeId() == Customer.PARTICIPANT){ 
                final PaymentWindow paymentWindow = new PaymentWindow(this, rootPaneCheckingEnabled);
                paymentWindow.setVisible(true);
                
                boolean cancel = paymentWindow.cancel;
                paymentWindow.addWindowListener(new WindowListener() {
                    @Override
                    public void windowOpened(WindowEvent e) {}

                    @Override
                    public void windowClosing(WindowEvent e) {}

                    @Override
                    public void windowClosed(WindowEvent e) {
                       if(!cancel){
                            Customer.client = null;
                            InitialWindow initialWindow = new InitialWindow();
                            initialWindow.setVisible(true);
                            self.dispose(); 
                       }
                    }

                    @Override
                    public void windowIconified(WindowEvent e) {}

                    @Override
                    public void windowDeiconified(WindowEvent e) {}

                    @Override
                    public void windowActivated(WindowEvent e) {}

                    @Override
                    public void windowDeactivated(WindowEvent e) {}
                });
            }
            else{
                Customer.client = null;
                InitialWindow initialWindow = new InitialWindow();
                initialWindow.setVisible(true);
                self.dispose();               
            }
        }
        else
            JOptionPane.showMessageDialog(this, "Debe haber productos en la lista.","Error",JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_btnFinishActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        buttonPanel.removeAll();
        addButtons();
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnDeleteRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteRowActionPerformed
        DefaultTableModel tableModel = (DefaultTableModel)tblCustomerProductoList.getModel();
        int selectedRow = tblCustomerProductoList.getSelectedRow();
        float decreaseAmount = (float)tableModel.getValueAt(selectedRow, 2);
        String newAmount = Util.decreaseAmount(decreaseAmount, txtTotalPrice.getText());
        if(selectedRow != -1){
            tableModel.removeRow(selectedRow);
            DynamicComponents.getTxtTotalPrice().setText("Total" + "\t\t\t" + newAmount);
        }
        else
            JOptionPane.showMessageDialog(this, "Debe seleccionar una fila para borrar","Warning",JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnDeleteRowActionPerformed
// </editor-fold>  
    
    // <editor-fold defaultstate="collapsed" desc="Menus">
    private void menuProdAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuProdAddActionPerformed
        AddProductWindow addProductWindow = new AddProductWindow(this, true);
        addProductWindow.setVisible(true);
        boolean cancel = addProductWindow.cancel;
        addProductWindow.addWindowListener(new WindowListener() {
            @Override
            public void windowOpened(WindowEvent e) {}

            @Override
            public void windowClosing(WindowEvent e) {}

            @Override
            public void windowClosed(WindowEvent e) {
                if(!cancel){
                    Customer.client = null;
                    InitialWindow initialWindow = new InitialWindow();
                    initialWindow.setVisible(true);
                    self.dispose();                     
                }
            }

            @Override
            public void windowIconified(WindowEvent e) {}

            @Override
            public void windowDeiconified(WindowEvent e) {}

            @Override
            public void windowActivated(WindowEvent e) {}

            @Override
            public void windowDeactivated(WindowEvent e) {}
        });
    }//GEN-LAST:event_menuProdAddActionPerformed

    private void menuProdDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuProdDeleteActionPerformed
        DeleteProductWindow deleteProductWindow = new DeleteProductWindow(this, true);
        deleteProductWindow.setVisible(true);
        boolean cancel = deleteProductWindow.cancel;
        deleteProductWindow.addWindowListener(new WindowListener() {
            @Override
            public void windowOpened(WindowEvent e) {}

            @Override
            public void windowClosing(WindowEvent e) {}

            @Override
            public void windowClosed(WindowEvent e) {
                if(!cancel){
                    Customer.client = null;
                    InitialWindow initialWindow = new InitialWindow();
                    initialWindow.setVisible(true);
                    self.dispose();                     
                }            
            }

            @Override
            public void windowIconified(WindowEvent e) {}

            @Override
            public void windowDeiconified(WindowEvent e) {}

            @Override
            public void windowActivated(WindowEvent e) {}

            @Override
            public void windowDeactivated(WindowEvent e) {}
        });
    }//GEN-LAST:event_menuProdDeleteActionPerformed

    private void menuProdModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuProdModifyActionPerformed
        ModifyProductWindow modifyProductWindw = new ModifyProductWindow(this, true);
        modifyProductWindw.setVisible(true);
    }//GEN-LAST:event_menuProdModifyActionPerformed

    private void menuClientAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuClientAddActionPerformed
        AddClientWindow addClientWindow = new AddClientWindow(this, true);
        addClientWindow.setVisible(true);
    }//GEN-LAST:event_menuClientAddActionPerformed

    private void menuClientDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuClientDeleteActionPerformed
        DelClientWindow delClientWindow = new DelClientWindow(this, true);
        delClientWindow.setVisible(true);
    }//GEN-LAST:event_menuClientDeleteActionPerformed

    private void menuClientModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuClientModifyActionPerformed
        ModifyClientWindow modifyClientWindow = new ModifyClientWindow(this, true);
        modifyClientWindow.setVisible(true);
    }//GEN-LAST:event_menuClientModifyActionPerformed

    private void menuUserSalesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuUserSalesActionPerformed
        ViewUserSalesWindow viewUserSalesWindow = new ViewUserSalesWindow(this, true);
        viewUserSalesWindow.setVisible(true);
    }//GEN-LAST:event_menuUserSalesActionPerformed

    private void menuUserAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuUserAddActionPerformed
        AddUserWindow addUserWindow = new AddUserWindow(this, true);
        addUserWindow.setVisible(true);
    }//GEN-LAST:event_menuUserAddActionPerformed

    private void menuImageAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuImageAddActionPerformed
        AddImageWindow addImageWindow = new AddImageWindow(this, true);
        addImageWindow.setVisible(true);
    }//GEN-LAST:event_menuImageAddActionPerformed

    private void menuDelProductTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuDelProductTypeActionPerformed
        DelProductTypeWindow delProductTypeWindow = new DelProductTypeWindow(this, true);
        delProductTypeWindow.setVisible(true);
        boolean cancel = delProductTypeWindow.cancel;
        delProductTypeWindow.addWindowListener(new WindowListener() {
            @Override
            public void windowOpened(WindowEvent e) {}

            @Override
            public void windowClosing(WindowEvent e) {}

            @Override
            public void windowClosed(WindowEvent e) {
                if(!cancel){
                    Customer.client = null;
                    InitialWindow initialWindow = new InitialWindow();
                    initialWindow.setVisible(true);
                    self.dispose();                     
                }
            }

            @Override
            public void windowIconified(WindowEvent e) {}

            @Override
            public void windowDeiconified(WindowEvent e) {}

            @Override
            public void windowActivated(WindowEvent e) {}

            @Override
            public void windowDeactivated(WindowEvent e) {}
        });
    }//GEN-LAST:event_menuDelProductTypeActionPerformed

    private void menuAddProductTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAddProductTypeActionPerformed
        AddProductTypeWindow addProductTypeWindow = new AddProductTypeWindow(this, true);
        addProductTypeWindow.setVisible(true);
        boolean cancel = addProductTypeWindow.cancel;
        addProductTypeWindow.addWindowListener(new WindowListener() {
            @Override
            public void windowOpened(WindowEvent e) {}

            @Override
            public void windowClosing(WindowEvent e) {}

            @Override
            public void windowClosed(WindowEvent e) {
                if(!cancel){
                    Customer.client = null;
                    InitialWindow initialWindow = new InitialWindow();
                    initialWindow.setVisible(true);
                    self.dispose();                     
                }
            }

            @Override
            public void windowIconified(WindowEvent e) {}

            @Override
            public void windowDeiconified(WindowEvent e) {}

            @Override
            public void windowActivated(WindowEvent e) {}

            @Override
            public void windowDeactivated(WindowEvent e) {}
        });
    }//GEN-LAST:event_menuAddProductTypeActionPerformed
// </editor-fold>
    // <editor-fold defaultstate="collapsed" desc="Private method">
    private void setUser(){
        if(Customer.client == null){
            Query query = session.createQuery("Select c from Client c where c.name = 'Participante'");
            Client c = (Client)query.uniqueResult();
            Customer.client = c;
            Customer.clientType = c.getClientType();
        }
        //Cambiar etiqueta cuando se pulse cambiar usuario
        lblClient.setText("Cliente: "+Customer.client.getName());
    }
        
    private void addButtons(){
                    
        List<ProductType> listTiposProducto = Util.getProductTypeAll();       
        
        if(!listTiposProducto.isEmpty()){
            List<ButtonEntity> listTemp = new ArrayList<ButtonEntity>(listTiposProducto.size());
            Iterator it = listTiposProducto.iterator();

            while(it.hasNext()){
                listTemp.add((ButtonEntity)it.next());
            }
            
           DynamicComponents.setTblCustomerProductoList(tblCustomerProductoList);
           DynamicComponents.setTxtTotalPrice(txtTotalPrice);
           buttonPanel = new DynamicButtons(listTemp);
           centerScrollPane.setViewportView(buttonPanel);
        }
    }
    //</editor-fold>
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InitialWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InitialWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InitialWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InitialWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InitialWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDeleteRow;
    private javax.swing.JButton btnFinish;
    private javax.swing.JButton btnSelectUser;
    private javax.swing.JScrollPane centerScrollPane;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblClient;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblUser;
    private javax.swing.JPanel leftPanel;
    private javax.swing.JMenuItem menuAddProductType;
    private javax.swing.JMenu menuAdvance;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem menuClientAdd;
    private javax.swing.JMenuItem menuClientDelete;
    private javax.swing.JMenuItem menuClientModify;
    private javax.swing.JMenu menuClients;
    private javax.swing.JMenuItem menuDelProductType;
    private javax.swing.JMenuItem menuImageAdd;
    private javax.swing.JMenuItem menuProdAdd;
    private javax.swing.JMenuItem menuProdDelete;
    private javax.swing.JMenuItem menuProdModify;
    private javax.swing.JMenu menuProducts;
    private javax.swing.JMenuItem menuUserAdd;
    private javax.swing.JMenuItem menuUserSales;
    private javax.swing.JTable tblCustomerProductoList;
    private javax.swing.JPanel topPanel;
    private javax.swing.JTextField txtTotalPrice;
    // End of variables declaration//GEN-END:variables
}
